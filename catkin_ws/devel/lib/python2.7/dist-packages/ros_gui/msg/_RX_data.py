"""autogenerated by genpy from ros_gui/RX_data.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RX_data(genpy.Message):
  _md5sum = "9cbb632bcd28f1c68281f54e66f805fd"
  _type = "ros_gui/RX_data"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16 m1_velocity
int16 m2_velocity
int16 m3_velocity
int16 m1_current
int16 m2_current
int16 m3_current
int16 x_acelleration
int16 y_acelleration
int16 angular_velocity
int16 compass
int8 m1_dutycycle
int8 m2_dutycycle
int8 m3_dutycycle
int16 m1_setpoint
int16 m2_setpoint
int16 m3_setpoint
float64 m1_inc_control_signal
float64 m2_inc_control_signal
float64 m3_inc_control_signal
float64 m1_control_signal
float64 m2_control_signal
float64 m3_control_signal
float64 V
float64 Vn
float64 W
int16 delta_time
float64 X_robot
float64 Y_robot
float64 Theta_robot
float64 Vref
float64 Vnref
float64 Wref
float64 X_robot_Odom
float64 Y_robot_Odom
float64 Theta_robot_Odom
float64 X_v1
float64 Y_v1
float64 Theta_v1
float64 id_v1
float64 X_v2
float64 Y_v2
float64 Theta_v2
float64 id_v2

"""
  __slots__ = ['m1_velocity','m2_velocity','m3_velocity','m1_current','m2_current','m3_current','x_acelleration','y_acelleration','angular_velocity','compass','m1_dutycycle','m2_dutycycle','m3_dutycycle','m1_setpoint','m2_setpoint','m3_setpoint','m1_inc_control_signal','m2_inc_control_signal','m3_inc_control_signal','m1_control_signal','m2_control_signal','m3_control_signal','V','Vn','W','delta_time','X_robot','Y_robot','Theta_robot','Vref','Vnref','Wref','X_robot_Odom','Y_robot_Odom','Theta_robot_Odom','X_v1','Y_v1','Theta_v1','id_v1','X_v2','Y_v2','Theta_v2','id_v2']
  _slot_types = ['int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int8','int8','int8','int16','int16','int16','float64','float64','float64','float64','float64','float64','float64','float64','float64','int16','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       m1_velocity,m2_velocity,m3_velocity,m1_current,m2_current,m3_current,x_acelleration,y_acelleration,angular_velocity,compass,m1_dutycycle,m2_dutycycle,m3_dutycycle,m1_setpoint,m2_setpoint,m3_setpoint,m1_inc_control_signal,m2_inc_control_signal,m3_inc_control_signal,m1_control_signal,m2_control_signal,m3_control_signal,V,Vn,W,delta_time,X_robot,Y_robot,Theta_robot,Vref,Vnref,Wref,X_robot_Odom,Y_robot_Odom,Theta_robot_Odom,X_v1,Y_v1,Theta_v1,id_v1,X_v2,Y_v2,Theta_v2,id_v2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RX_data, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.m1_velocity is None:
        self.m1_velocity = 0
      if self.m2_velocity is None:
        self.m2_velocity = 0
      if self.m3_velocity is None:
        self.m3_velocity = 0
      if self.m1_current is None:
        self.m1_current = 0
      if self.m2_current is None:
        self.m2_current = 0
      if self.m3_current is None:
        self.m3_current = 0
      if self.x_acelleration is None:
        self.x_acelleration = 0
      if self.y_acelleration is None:
        self.y_acelleration = 0
      if self.angular_velocity is None:
        self.angular_velocity = 0
      if self.compass is None:
        self.compass = 0
      if self.m1_dutycycle is None:
        self.m1_dutycycle = 0
      if self.m2_dutycycle is None:
        self.m2_dutycycle = 0
      if self.m3_dutycycle is None:
        self.m3_dutycycle = 0
      if self.m1_setpoint is None:
        self.m1_setpoint = 0
      if self.m2_setpoint is None:
        self.m2_setpoint = 0
      if self.m3_setpoint is None:
        self.m3_setpoint = 0
      if self.m1_inc_control_signal is None:
        self.m1_inc_control_signal = 0.
      if self.m2_inc_control_signal is None:
        self.m2_inc_control_signal = 0.
      if self.m3_inc_control_signal is None:
        self.m3_inc_control_signal = 0.
      if self.m1_control_signal is None:
        self.m1_control_signal = 0.
      if self.m2_control_signal is None:
        self.m2_control_signal = 0.
      if self.m3_control_signal is None:
        self.m3_control_signal = 0.
      if self.V is None:
        self.V = 0.
      if self.Vn is None:
        self.Vn = 0.
      if self.W is None:
        self.W = 0.
      if self.delta_time is None:
        self.delta_time = 0
      if self.X_robot is None:
        self.X_robot = 0.
      if self.Y_robot is None:
        self.Y_robot = 0.
      if self.Theta_robot is None:
        self.Theta_robot = 0.
      if self.Vref is None:
        self.Vref = 0.
      if self.Vnref is None:
        self.Vnref = 0.
      if self.Wref is None:
        self.Wref = 0.
      if self.X_robot_Odom is None:
        self.X_robot_Odom = 0.
      if self.Y_robot_Odom is None:
        self.Y_robot_Odom = 0.
      if self.Theta_robot_Odom is None:
        self.Theta_robot_Odom = 0.
      if self.X_v1 is None:
        self.X_v1 = 0.
      if self.Y_v1 is None:
        self.Y_v1 = 0.
      if self.Theta_v1 is None:
        self.Theta_v1 = 0.
      if self.id_v1 is None:
        self.id_v1 = 0.
      if self.X_v2 is None:
        self.X_v2 = 0.
      if self.Y_v2 is None:
        self.Y_v2 = 0.
      if self.Theta_v2 is None:
        self.Theta_v2 = 0.
      if self.id_v2 is None:
        self.id_v2 = 0.
    else:
      self.m1_velocity = 0
      self.m2_velocity = 0
      self.m3_velocity = 0
      self.m1_current = 0
      self.m2_current = 0
      self.m3_current = 0
      self.x_acelleration = 0
      self.y_acelleration = 0
      self.angular_velocity = 0
      self.compass = 0
      self.m1_dutycycle = 0
      self.m2_dutycycle = 0
      self.m3_dutycycle = 0
      self.m1_setpoint = 0
      self.m2_setpoint = 0
      self.m3_setpoint = 0
      self.m1_inc_control_signal = 0.
      self.m2_inc_control_signal = 0.
      self.m3_inc_control_signal = 0.
      self.m1_control_signal = 0.
      self.m2_control_signal = 0.
      self.m3_control_signal = 0.
      self.V = 0.
      self.Vn = 0.
      self.W = 0.
      self.delta_time = 0
      self.X_robot = 0.
      self.Y_robot = 0.
      self.Theta_robot = 0.
      self.Vref = 0.
      self.Vnref = 0.
      self.Wref = 0.
      self.X_robot_Odom = 0.
      self.Y_robot_Odom = 0.
      self.Theta_robot_Odom = 0.
      self.X_v1 = 0.
      self.Y_v1 = 0.
      self.Theta_v1 = 0.
      self.id_v1 = 0.
      self.X_v2 = 0.
      self.Y_v2 = 0.
      self.Theta_v2 = 0.
      self.id_v2 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_10h3b3h9dh17d.pack(_x.m1_velocity, _x.m2_velocity, _x.m3_velocity, _x.m1_current, _x.m2_current, _x.m3_current, _x.x_acelleration, _x.y_acelleration, _x.angular_velocity, _x.compass, _x.m1_dutycycle, _x.m2_dutycycle, _x.m3_dutycycle, _x.m1_setpoint, _x.m2_setpoint, _x.m3_setpoint, _x.m1_inc_control_signal, _x.m2_inc_control_signal, _x.m3_inc_control_signal, _x.m1_control_signal, _x.m2_control_signal, _x.m3_control_signal, _x.V, _x.Vn, _x.W, _x.delta_time, _x.X_robot, _x.Y_robot, _x.Theta_robot, _x.Vref, _x.Vnref, _x.Wref, _x.X_robot_Odom, _x.Y_robot_Odom, _x.Theta_robot_Odom, _x.X_v1, _x.Y_v1, _x.Theta_v1, _x.id_v1, _x.X_v2, _x.Y_v2, _x.Theta_v2, _x.id_v2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 239
      (_x.m1_velocity, _x.m2_velocity, _x.m3_velocity, _x.m1_current, _x.m2_current, _x.m3_current, _x.x_acelleration, _x.y_acelleration, _x.angular_velocity, _x.compass, _x.m1_dutycycle, _x.m2_dutycycle, _x.m3_dutycycle, _x.m1_setpoint, _x.m2_setpoint, _x.m3_setpoint, _x.m1_inc_control_signal, _x.m2_inc_control_signal, _x.m3_inc_control_signal, _x.m1_control_signal, _x.m2_control_signal, _x.m3_control_signal, _x.V, _x.Vn, _x.W, _x.delta_time, _x.X_robot, _x.Y_robot, _x.Theta_robot, _x.Vref, _x.Vnref, _x.Wref, _x.X_robot_Odom, _x.Y_robot_Odom, _x.Theta_robot_Odom, _x.X_v1, _x.Y_v1, _x.Theta_v1, _x.id_v1, _x.X_v2, _x.Y_v2, _x.Theta_v2, _x.id_v2,) = _struct_10h3b3h9dh17d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_10h3b3h9dh17d.pack(_x.m1_velocity, _x.m2_velocity, _x.m3_velocity, _x.m1_current, _x.m2_current, _x.m3_current, _x.x_acelleration, _x.y_acelleration, _x.angular_velocity, _x.compass, _x.m1_dutycycle, _x.m2_dutycycle, _x.m3_dutycycle, _x.m1_setpoint, _x.m2_setpoint, _x.m3_setpoint, _x.m1_inc_control_signal, _x.m2_inc_control_signal, _x.m3_inc_control_signal, _x.m1_control_signal, _x.m2_control_signal, _x.m3_control_signal, _x.V, _x.Vn, _x.W, _x.delta_time, _x.X_robot, _x.Y_robot, _x.Theta_robot, _x.Vref, _x.Vnref, _x.Wref, _x.X_robot_Odom, _x.Y_robot_Odom, _x.Theta_robot_Odom, _x.X_v1, _x.Y_v1, _x.Theta_v1, _x.id_v1, _x.X_v2, _x.Y_v2, _x.Theta_v2, _x.id_v2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 239
      (_x.m1_velocity, _x.m2_velocity, _x.m3_velocity, _x.m1_current, _x.m2_current, _x.m3_current, _x.x_acelleration, _x.y_acelleration, _x.angular_velocity, _x.compass, _x.m1_dutycycle, _x.m2_dutycycle, _x.m3_dutycycle, _x.m1_setpoint, _x.m2_setpoint, _x.m3_setpoint, _x.m1_inc_control_signal, _x.m2_inc_control_signal, _x.m3_inc_control_signal, _x.m1_control_signal, _x.m2_control_signal, _x.m3_control_signal, _x.V, _x.Vn, _x.W, _x.delta_time, _x.X_robot, _x.Y_robot, _x.Theta_robot, _x.Vref, _x.Vnref, _x.Wref, _x.X_robot_Odom, _x.Y_robot_Odom, _x.Theta_robot_Odom, _x.X_v1, _x.Y_v1, _x.Theta_v1, _x.id_v1, _x.X_v2, _x.Y_v2, _x.Theta_v2, _x.id_v2,) = _struct_10h3b3h9dh17d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_10h3b3h9dh17d = struct.Struct("<10h3b3h9dh17d")
